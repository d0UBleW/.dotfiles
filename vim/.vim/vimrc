set nocp

source $VIMRUNTIME/defaults.vim

" Plugin

call plug#begin('~/.vim/plugged') " Installed plugins directory

Plug 'jiangmiao/auto-pairs'

Plug 'wellle/targets.vim'

Plug 'tpope/vim-fugitive'

Plug 'tpope/vim-repeat'

Plug 'tpope/vim-surround'

Plug 'tpope/vim-commentary'

Plug 'tpope/vim-vinegar'

Plug 'tpope/vim-unimpaired'

Plug 'tpope/vim-sleuth'

" Plug 'inkarkat/vim-ReplaceWithRegister'

Plug 'bkad/CamelCaseMotion'

" Plug 'christoomey/vim-system-copy'

" Plug 'michaeljsmith/vim-indent-object'

Plug 'kana/vim-textobj-user'

Plug 'kana/vim-textobj-entire'

Plug 'kana/vim-textobj-line'

Plug 'joshdick/onedark.vim'

Plug 'uiiaoo/java-syntax.vim'

Plug 'petRUShka/vim-sage'

Plug 'vim-python/python-syntax'

" Plug 'ludovicchabant/vim-gutentags'

" Plug 'Vimjas/vim-python-pep8-indent'

Plug 'pprovost/vim-ps1'

Plug 'mbbill/undotree'

Plug 'jelera/vim-javascript-syntax'

Plug 'andymass/vim-matchup'

Plug 'morhetz/gruvbox'

Plug 'sonph/onehalf', { 'rtp': 'vim/' }

Plug 'lifepillar/vim-solarized8'

" Plug 'ervandew/supertab'

" Plug 'ycm-core/YouCompleteMe'

Plug 'vim-pandoc/vim-pandoc'

Plug 'vim-pandoc/vim-pandoc-syntax'

" Plug 'sheerun/vim-polyglot'

Plug 'ap/vim-css-color'

Plug 'bfrg/vim-cpp-modern'

Plug 'vim-scripts/DoxygenToolkit.vim'

Plug 'airblade/vim-gitgutter'

Plug 'rhysd/vim-clang-format'

Plug 'vimpostor/vim-lumen'

Plug 'Yggdroot/indentLine'

Plug 'ryanoasis/vim-devicons'

Plug 'editorconfig/editorconfig-vim'

Plug 'neoclide/coc.nvim', {'branch': 'release'}

Plug 'airblade/vim-rooter'

call plug#end()

filetype plugin indent on

syntax on

" editorconfig
let g:EditorConfig_exclude_patterns = ['fugitive://.*', 'scp://.*']

" Camel
let g:camelcasemotion_key = '\'

" auto-pairs
let g:AutoPairsShortcutFastWrap = "<F12>"

" disable matchit
let g:loaded_matchit = 1

" matchup + surround
let g:matchup_surround_enabled = 1

" vim-python/python-syntax
let g:python_highlight_all = 1

" matchup
let g:matchup_matchpref = { 
            \ "html": { 
                \ "tagnameonly": 1 
                \ } }

" CoC

function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction


inoremap <silent><expr> <TAB>
    \ pumvisible() ? "\<C-n>" :
    \ CheckBackspace() ? "\<TAB>" :
    \ coc#refresh()

inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call ShowDocumentation()<CR>

function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Run the Code Lens action on the current line.
nmap <leader>cl  <Plug>(coc-codelens-action)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Remap <C-f> and <C-b> for scroll float windows/popups.
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of language server.
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocActionAsync('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocActionAsync('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
" set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings for CoCList
" Show all diagnostics.
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent><nowait> zj  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent><nowait> zk  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>

function! SetupCommandAbbrs(from, to)
  exec 'cnoreabbrev <expr> '.a:from
        \ .' ((getcmdtype() ==# ":" && getcmdline() ==# "'.a:from.'")'
        \ .'? ("'.a:to.'") : ("'.a:from.'"))'
endfunction

" Use C to open coc config
call SetupCommandAbbrs('C', 'CocConfig')

nnoremap <silent> <space>y  :<C-u>CocList -A --normal yank<cr>


" indentLine
nnoremap yo<tab> :IndentLinesToggle<CR>

let g:indentLine_char_list = ['|', '¦', '┆', '┊']



" Cursor
let &t_SI .= "\<Esc>[6 q"
let &t_EI .= "\<Esc>[2 q"
let &t_SR .= "\<Esc>[4 q"

let mapleader = '\'
let maplocalleader = '|'


let &background = strftime("%H") < 18 ? "light" : "dark"
" set background=light
" set background=dark

set autowrite		" Automatically save before commands like :next and :make
set mouse=a
" set t_Co=256    " Force 256 colours

set termguicolors

" colorscheme onedark
" colorscheme gruvbox

" onehalflight requires `set t_Co=256`
" colorscheme onehalflight

colorscheme solarized8


set nobackup
set noswapfile

" Disable line wrapping
set nowrap

" Avoid breaking word when line wrapping
set linebreak

" Show line break character
"set showbreak=↪
"set showbreak=▹
set showbreak=…

" Customize SpecialKey (tab, nbsp, trail, space) and NonText (eol, precedes, extends) characters
set listchars=tab:→\ ,eol:↲,nbsp:␣,trail:•,precedes:«,extends:»,space:·
"set listchars=tab:»·,trail:·,eol:¶

" Smooth backspace experience
set backspace=indent,eol,start

" Enable line numbering
set nu rnu

" Indenting
set autoindent
set smartindent

" Tabbing
set smarttab
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab

set belloff=all

set wildmenu
set wildmode=longest:full,full

" Buffer
set hidden

set incsearch
set ignorecase
set smartcase
set nohlsearch

set splitbelow
set splitright

set laststatus=2
set showcmd

set cursorline

set colorcolumn=79
set signcolumn=yes
" set signcolumn=number

" set completeopt-=preview
" set completeopt+=menuone


" Undo directory
function! Tmpwatch(path, days)
    let l:path = expand(a:path)
    if isdirectory(l:path)
        for file in globpath(l:path, '*', 1, 1)
            if localtime() > getftime(file) + 86400 * a:days && delete(file) != 0
                echo "Tmpwatch(): Error deleting '" . file . "'"
            endif
        endfor
    else
        echo "Tmpwatch(): Directory '" . l:path . "'not found"
    endif
endfunction

if exists("+undofile")
    if !isdirectory($HOME . '/.vim' . '/.undo')
        call system('mkdir ' . $HOME . '/.vim' . '/.undo')
    endif
    set undodir=~/.vim/.undo// ",/tmp//
    set undofile
    set undolevels=1000
    set undoreload=10000

    call Tmpwatch(&undodir, 31)
endif


" NetRW
" let g:netrw_liststyle=3
" let g:netrw_banner=0
" let g:netrw_chgwin=2
" let g:netrw_preview=1
" let g:netrw_browse_split=4
" let g:netrw_winsize=25
" let g:netrw_altv=0
" let g:netrw_sort_by="exten"
" let g:netwr_keepdir=0
" let g:netrw_list_hide='\(^\|\s\s\)\zs\.\S\+'
" let g:netrw_localcopydircmd="cp -r"
" hi! link netrwMarkFile Search

let g:NetrwIsOpen=0

function! ToggleNetrw()
    if g:NetrwIsOpen
        let i = bufnr("$")
        while (i >= 1)
            if (getbufvar(i, "&filetype") == "netrw")
                silent exe "bwipeout " . i
            endif
            let i-=1
        endwhile
        let g:NetrwIsOpen=0
    else
        let g:NetrwIsOpen=1
        silent Lexplore
        " silent Explore
        " call feedkeys("\<C-w>p")
    endif
endfunction

" function! NetrwMapping()
"     nmap <buffer> H u
"     nmap <buffer> h -^
"     nmap <buffer> l <CR>
"     nmap <buffer> . gh
"     nmap <buffer> P <C-w>z
"     nmap <buffer> <Tab> mf
"     nmap <buffer> <S-Tab> mF
"     nmap <buffer> <leader><Tab> mu
"     nmap <buffer> ff %:w<CR>:buffer #<CR>
"     nmap <buffer> fe R
"     nmap <buffer> fc mc
"     nmap <buffer> fC mtmc
"     nmap <buffer> fx mm
"     nmap <buffer> fX mtmm
"     nmap <buffer> f; mx
"     nmap <buffer> fl :echo join(netrw#Expose("netrwmarkfilelist"), "\n")<CR>
"     nmap <buffer> fq :echo 'Target:' . netrw#Expose("netrwmftgt")<CR>
"     nmap <buffer> fd mtfq
" endfunction

" Add your own mapping. For example:
augroup netrw_mapping
    autocmd!
    " noremap <silent> <F2> :call ToggleNetrw()<CR>
    " noremap <silent> <leader><F2> :call ToggleNetrw()<CR>:call ToggleNetrw()<CR>
    " autocmd filetype netrw call NetrwMapping()
augroup END

" augroup ProjectDrawer
"     autocmd!
"     autocmd VimEnter * :Vexplore
" augroup END

" autocmd FileType * let g:NetrwIsOpen=0
" autocmd FileType netrw let g:NetrwIsOpen=1

" autocmd VimEnter * if argc() == 1 | if isdirectory(argv()[0]) || argv()[0] == '.' |
"             \ execute "cd " . argv()[0] | enew | call ToggleNetrw() | endif | endif


" Mapping

nnoremap <Leader>sr :%s/<C-r><C-w>//g<left><left>
nnoremap <Leader>cd :cd %:p:h<CR>:pwd<CR>
nnoremap <Leader><CR> o<Esc>
nnoremap <silent> <leader>u :UndotreeToggle<CR>
nnoremap <silent> <leader>co :copen<CR>
nnoremap <silent> <leader>cc :cclose<CR>

nnoremap <space>h <C-w>h
nnoremap <space>j <C-w>j
nnoremap <space>k <C-w>k
nnoremap <space>l <C-w>l

nnoremap <silent> <Tab> :tabnext<CR>
nnoremap <silent> <S-Tab> :tabprevious<CR>

nnoremap Y y$
nnoremap n nzzzv
nnoremap N Nzzzv
nnoremap J mzJ`z

vnoremap <silent> <C-j> :m '>+1<CR>gv=gv
vnoremap <silent> <C-k> :m '<-2<CR>gv=gv
nnoremap <silent> <C-j> :m +1<CR>==
nnoremap <silent> <C-k> :m -2<CR>==
" inoremap <silent> <C-j> <esc>mz:m +1<CR>==`za
" inoremap <silent> <C-k> <esc>mz:m -2<CR>==`za

" inoremap ;a <Esc>
inoremap <leader>e <C-o>A

" Trigger iabbrev
inoremap <C-j> <C-]>

function! InsertSemicolon()
    let line=getline('.')
    let semi=matchstr(line, ";$")
    if semi == ""
        execute "normal! mqA;\<esc>`q"
        delmarks q
    endif
endfunction

nnoremap <silent> \; :call InsertSemicolon()<CR>
inoremap <silent> ;<tab> <C-o>:call InsertSemicolon()<CR>

" Search Replace
nnoremap <Leader>sr :%s/<C-r><C-w>//g<Left><Left>

" Toggle Line numbering
nnoremap <silent> <leader>n :exec &nu==&rnu? "set nu!" : "set rnu!"<CR>

cnoremap <C-a> <Home>
cnoremap <c-e> <End>

" https://vim.fandom.com/wiki/Make_Vim_completion_popup_menu_work_just_like_in_an_IDE
" inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Fugitive
nmap <leader>gh :diffget //2<CR>
nmap <leader>gl :diffget //3<CR>
nmap <leader>gs :G<CR>

" Skeleton Templates

function! Java_Skel()
    0r $HOME/.vim/templates/skeleton.java
    s/FILENAME/\=expand("%:t:r")
    " execute "normal! 1j"
endfunction

function! Header_Skel()
    0r $HOME/.vim/templates/skeleton.h
    let l:filename = toupper(expand("%:t:r"))
    %s/FILENAME/\=expand(l:filename)
    execute "normal! Gddkk"
endfunction

if has("autocmd")
    augroup templates
        au!
        " au BufNewFile *.sh 0r ~/.vim/templates/skeleton.sh
        au BufNewFile *.html 0r ~/.vim/templates/skeleton.html
        au BufNewFile *.java call Java_Skel()
        au BufNewFile *.h call Header_Skel()
    augroup end
endif



" Misc

function! FugitiveMapping()
    nnoremap <silent> <buffer> <localleader>q :bwipeout<CR>
endfunction

function! QuickfixMapping()
  " Go to the previous location and stay in the quickfix window
    nnoremap <buffer> K :cprev<CR>zz<C-w>w

    " Go to the next location and stay in the quickfix window
    nnoremap <buffer> J :cnext<CR>zz<C-w>w

    nnoremap <silent> <buffer> <localleader>q :bwipeout<CR>
endfunction

augroup quickfix_group
  autocmd!

  " Use custom keybindings
  autocmd filetype qf call QuickfixMapping()
  autocmd filetype fugitive*,git call FugitiveMapping()
augroup END

augroup helpft
    au!
    autocmd filetype help nnoremap <silent> <buffer> <localleader>q :bwipeout<CR>
    autocmd filetype help nnoremap <silent> <buffer> <F1> :bwipeout<CR>
augroup END

autocmd! BufWritePost vimrc source ~/.vim/vimrc


set autoread
set title
set confirm

if executable('rg')
    set grepprg=rg\ --vimgrep\ --no-ignore
    set grepformat^=%f:%l:%c:%m
endif

augroup highlights
    au!
    " autocmd ColorScheme * highlight SpecialKey guifg=#56b6c2 guibg=#3e4452
    " autocmd ColorScheme * highlight SpecialKey guifg=orange guibg=gray
    " highlight SpecialKey guifg=#83a958 guibg=#3c3836
    " hi NonText ctermfg=7 guifg=#abb2bf
augroup END

" hi SpecialKey guifg=#83a958 guibg=#3c3836
" hi CursorLine term=NONE cterm=NONE ctermbg=235 ctermfg=NONE gui=NONE guibg=#2a2a2a
" hi CursorColumn cterm=NONE ctermbg=235 ctermfg=NONE
" hi CursorLineNr term=bold cterm=bold ctermfg=lightblue gui=bold guifg=lightblue



" augroup vimrcEx
"     au!
"     " For all text files set 'textwidth' to 78 characters or use `gq` to break
"     " line
"     autocmd FileType text setlocal textwidth=78
" augroup END

" WSL yank support
let s:clip = '/mnt/c/Windows/System32/clip.exe'  " change this path according to your mount point
if executable(s:clip)
    augroup WSLYank
        autocmd!
        autocmd TextYankPost * if v:event.operator ==# 'y' | call system(s:clip, @0) | endif
    augroup END
endif

augroup JSONGroup
    autocmd!
    autocmd filetype json let g:indentLine_setConceal=0
    autocmd FileType json syntax match Comment +\/\/.\+$+
augroup END

augroup CommentaryFt
    autocmd!
    autocmd filetype json,cpp,c setlocal commentstring=\/\/\ %s
augroup END

call mystatusline#SetStatusLine()

